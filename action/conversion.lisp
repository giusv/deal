(defaction (csv-to-json ((source variable) 
                         (result variable)))
    (to-list () `(csv-to-json (:source  ,(synth to-list source) :result ,(synth to-list result) :pre ,(synth to-list pre) :post ,(synth to-list post))))
  (to-html () (multitags 
               (text "Sia ") 
               (synth to-html result) 
               (text " il risultato della traduzione in JSON di")
               (synth to-html source)
               (dlist pre (text "Precondizione: ") (synth to-html pre)
                      post (text "Postcondizione:") (synth to-html post)))))

(defun csv-to-json2 (source &key pre post)
  (let ((result (variab (gensym))))
    (values (csv-to-json source result :pre pre :post post) result)))

(defaction (rel-to-json ((source variable)
                         (result variable)
                         (free (list 'symbol))
                         &key (group (group (list 'symbol)))))
  (to-list () `(rel-to-json (:source  ,(synth to-list source) :group ,@group :free ,@free :result ,(synth to-list result) :pre ,(synth to-list pre) :post ,(synth to-list post))))
  (to-html () (multitags 
               (text "Sia ") 
               (synth to-html result)
               (text " il risultato della traduzione in JSON della relazione ")
               (synth to-html source)
               (text " usando come campi liberi ~{~a~^, ~}" (mapcar #'lower-camel free))
               (if group (text " e come campi di raggruppamento ~{~a~^, ~}" (mapcar #'lower-camel group))
                   (empty))
               (dlist pre (text "Precondizione: ") (synth to-html pre)
                      post (text "Postcondizione:") (synth to-html post)))))
(defun rel-to-json2 (source free &key group pre post)
  (let ((result (variab (gensym))))
    (values (rel-to-json source result free :group group :pre pre :post post) result)))
