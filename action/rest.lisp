(defmacro def-http-action (name &optional (payload t))
  (let ((full-name (symb "HTTP-" name)))
    `(defprod action (,full-name ((url expression)
				 ,@(if payload `((payload payload)))
				 (response variable)))
       (to-list () (list ',full-name (list :url (synth to-list url) 
					   ,@(if payload (list ':payload '(synth to-list payload))) 
					   :response response)))
       (to-html () (div nil 
			(text "Azione ~a verso l'URL " ',name)
			(synth to-html url)
			,@(if payload (list '(text "con il payload seguente:")
					    '(synth to-html payload))))))))

(def-http-action get nil)
(def-http-action post)
(def-http-action put)
(def-http-action delete nil)

(defprod action (http-response ((code number)
                                &optional (payload expression)))
  (to-list () `(http-response :code ,code :payload (synth to-html payload)))
  (to-html () (div nil (text "Restituzione risposta HTTP ~a" code)
                   (if payload (div nil (text "con il seguente payload:")
                                    (synth to-html payload))))))
;; (pprint (synth to-list (http-get (void-url) (gensym "GET"))))
