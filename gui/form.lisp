(defprod element (form ((name symbol)
                        (schema jsschema) 
                        (element element)))
  (to-list () `(form (:name ,name :schema ,(synth to-list schema) 
                            :element ,(synth to-list element))))
  (to-html (path) (multitags 
  		       (text "Form identificato con ~a collegato al seguente formato dati:" (lower-camel name)) 
  		       (p nil (synth to-html schema))
                       (synth to-html element path)
                       (p nil (text "Esso produce il seguente oggetto JSON:")
                          (code nil (synth to-string (synth to-model (obj name schema bindings element)))))))
  (to-brief (path) (synth to-html (obj name schema bindings element) path))
  (to-model () (apply #'jobject (apply #'append (synth-all to-model bindings))))
  (toplevel () nil)
  (req (path) nil)
  (template (&optional father) (div (list :class "form-group")
                                    (synth template element name))))

(defprod element (bnd ((name symbol)
                       (element element)))
  (to-list () `(bnd (:name ,name :element ,(synth to-list element))))
  (to-html (path) (div nil (synth to-html element path)))
  (to-brief (path) (synth to-html (bnd name element) path))
  (to-model () (list (keyw name) (synth to-model element)))
  (toplevel () nil)
  (req (path) nil)
  (template (&optional father) (synth template element father)))

(defprod element (obj ((name symbol)
                       (schema jsschema)
                       (bindings (list binding))
                       (element element)))
  (to-list () `(obj (:name ,name :schema ,(synth to-list schema) 
                           :bindings ,(synth-plist-both to-list to-list bindings) 
                           :element ,(synth to-list element))))
  (to-html (path) (multitags 
  		       (text "Sezione identificata con ~a collegata al seguente formato dati:" (lower-camel name)) 
  		       (p nil (synth to-html schema))
                       (synth to-html element path)
                       (p nil (text "Essa produce il seguente oggetto JSON:")
                          (code nil (synth to-string (synth to-model (obj name schema bindings element)))))))
  (to-brief (path) (synth to-html (obj name schema bindings element) path))
  (to-model () (apply #'jobject (apply #'append (synth-all to-model bindings))))
  (toplevel () nil)
  (req (path) nil)
  (template (&optional father) (div (list :class "form-group")
                                    (synth template element name))))

(defmacro obj* (name schema binds elem)
  `(let* ,(mapcar #'(lambda (bind)
		      (destructuring-bind (name key elem) bind
			`(,name (bnd ',key ,elem))))
		  binds)
     (values (obj ,name ,schema (list ,@(mapcar #'car binds)) ,elem) (obj ,name ,schema (list ,@(mapcar #'car binds)) ,elem))))

(defprod element (arr ((name symbol)
                       (schema jsschema)
                       (min expression)
                       (max expression) 
                       (element element)))
  (to-list () `(arr (:name ,name 
                           :schema ,(synth to-list schema) 
                           :min ,(synth to-list min) 
                           :max ,(synth to-list max) 
                           :element ,(synth to-list element))))
  (to-html (path) (multitags 
                   (text "Sezione identificata con ~a collegata al seguente formato dati:" (lower-camel name)) 
                   (p nil (synth to-html schema)) 
                   (synth to-html element path)
                   (p nil (text "Essa produce il seguente oggetto JSON:")
                      (code nil (synth to-string (synth to-model (arr name schema min max element)))))))
  (to-brief (path) (synth to-html (arr name schema min max element) path))
  (to-model () (jarray (synth to-model element)))
  (toplevel () nil)
  (req (path) nil)
  (template (&optional father) (div (list :class "form-group")
                                    (synth template element name))))

;; (defmacro arr* (name schema min max elem)
;;   `(let* ,(mapcar #'(lambda (bind)
;; 		      (destructuring-bind (name key elem) bind
;; 			`(,name (bnd ',key ,elem))))
;; 		  binds)
;;      ))
